import os
import pandas as pd

idx = multiext(
        config['refgen_path'],
        ".amb",
        ".ann",
        ".bwt",
        ".pac",
        ".sa",
    )

samples = pd.read_table(config["samples_path"], index_col=0, comment='#').to_dict(orient='index')

wildcard_constraints:
    sample=f"({'|'.join([re.escape(run) for run in samples.keys()])})",
    side=('forward|reverse')

rule all:
    input:
        expand("../Data/Processed/insertion_sites/{sample}.bed",
        sample=samples.keys())

rule bwaindex:
    input:
        genome=config['refgen_path'],
    output:
        idx=idx,
    params:
        bwa='bwa-mem',
    threads: 8  #Only affects bwa-meme
    log:
        f"logs/bwa-memx_index/{os.path.basename(config['refgen_path'])[-1]}.log",
    cache: True
    wrapper:
        "v3.3.3/bio/bwa-memx/index"

rule map:
    input:
        reads=lambda wildcards: [samples[wildcards.sample]['fastq1'],
                                 samples[wildcards.sample]['fastq2']
        ],
        reference=config['refgen_path'],
        idx=idx,
    params:
        bwa='bwa-mem',
        sort="none",
        dedup="none",
    threads: 16
    output:
        "../Data/Processed/bams/{sample}.bam",
    log:
        "logs/bwa_memx/{sample}.log",
    benchmark:
        "benchmarks/bwa_memx/{sample}.tsv"
    wrapper:
        "v3.3.3/bio/bwa-memx/mem"

rule parse_sort:
    input:
        "../Data/Processed/bams/{sample}.bam",
    output:
        pipe("../Data/Processed/pairs/{sample}.pairs.gz"),
    conda:
        "envs/pairtools_env.yaml",
    log:
        "logs/parse/{sample}.log",
    benchmark:
        "benchmarks/parse/{sample}.tsv"
    threads: 16
    params:
        chrom_sizes_path=config['chrom_sizes_path'],
        cassette_name=config['cassette_name'],
    shell:
        """
        pairtools parse -c {params.chrom_sizes_path} --drop-seq --drop-sam --no-flip \
        --add-columns mapq,pos5,pos3 --report-alignment-end 5 {input} \
        | pairtools sort --nproc {threads} -o {output}
        """

rule get_side_pairs:
    input:
        "../Data/Processed/pairs/{sample}.pairs.gz",
    output:
        pipe("../Data/Processed/pairs/{sample}_{side}.pairs.gz"),
    conda:
        "envs/pairtools_env.yaml",
    log:
        "logs/get_side_pairs/{sample}_{side}.log",
    benchmark:
        "benchmarks/get_side_pairs/{sample}_{side}.tsv"
    threads: 4
    params:
        selection_chrom = config['cassette_name'],
        selection_start = lambda wildcards: config[f'{wildcards.side}_ITR_primer_position']-10,
        selection_end = lambda wildcards: config[f'{wildcards.side}_ITR_primer_position']+10,
    shell:
        """
        pairtools select '(\
                          (pair_type.upper()=="UR" or \
                           pair_type.upper()=="UU" or \
                           pair_type.upper()=="RU") and \
                          (chrom2=="{params.selection_chrom}") and \
                          (pos2>{params.selection_start}) and \
                          (pos2<{params.selection_end}))' \
        {input} \
        | pairtools sort --nproc {threads} -o {output} \
        >{log[0]} 2>&1
        """

rule dedup:
    input:
        "../Data/Processed/pairs/{sample}_{side}.pairs.gz",
    output:
        "../Data/Processed/pairs/{sample}_{side}_nodups.pairs.gz",
    conda:
        "envs/pairtools_env.yaml",
    log:
        "logs/dedup/{sample}_{side}.log",
    benchmark:
        "benchmarks/dedup/{sample}_{side}.tsv"
    threads: 1
    shell:
        """
        pairtools dedup --backend cython --max-mismatch 0 {input} \
        | pairtools sort --nproc {threads} -o {output} \
        >{log[0]} 2>&1
        """

rule coverage:
    input:
        "../Data/Processed/pairs/{sample}_{side}_nodups.pairs.gz",
    output:
        bg="../Data/Processed/coverage/{sample}_{side}_coverage.bedgraph",
        bw="../Data/Processed/coverage/{sample}_{side}_coverage.bw",
    conda:
        "envs/pairtools_env.yaml",
    log:
        "logs/coverage/{sample}_{side}.log",
    benchmark:
        "benchmarks/coverage/{sample}_{side}.tsv"
    threads: 1
    shell:
        """
        python3 workflow/scripts/coverage.py -i {input} -o {output.bg} \
        --output-bigwig {output.bw} \
        >{log[0]} 2>&1
        """

rule find_peaks:
    input:
        "../Data/Processed/coverage/{sample}_{side}_coverage.bedgraph",
    output:
        "../Data/Processed/peaks/{sample}_{side}.bed",
    conda:
        "envs/peaks.yaml",
    log:
        "logs/find_peaks/{sample}_{side}.log",
    benchmark:
        "benchmarks/find_peaks/{sample}_{side}.tsv"
    threads: 1
    params:
        min_peak_width=config['min_peak_width'],
    shell:
        """
        python3 workflow/scripts/find_peaks.py -i {input} -o {output} \
        --min-peak-width {params.min_peak_width} \
        >{log[0]} 2>&1
        """

rule find_insertion_sites:
    input:
        f="../Data/Processed/peaks/{sample}_forward.bed",
        r="../Data/Processed/peaks/{sample}_reverse.bed",
    output:
        "../Data/Processed/insertion_sites/{sample}.bed",
    conda:
        "envs/peaks.yaml",
    log:
        "logs/find_insertion_sites/{sample}.log",
    benchmark:
        "benchmarks/find_insertion_sites/{sample}.tsv"
    threads: 1
    shell:
        """
        python3 workflow/scripts/find_insertion_sites.py -f {input.f} -r {input.r} -o {output} \
        >{log[0]} 2>&1
        """